on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
    - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10
    
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:


name: Upload extension Release

jobs:
  build:
    name: Upload Release Asset
    runs-on: ubuntu-latest
    steps:

      # Print the available attributes of context
      - name: View context attributes
        uses: actions/github-script@v5
        with:
          script: console.log(context)

      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install Python 3
        uses: actions/setup-python@v1
        with:
          python-version: 3.8
      
      - name: Building extension
        run: |
          cd src
          python build.py
      
      - name: "Determine tag"
        run: "echo \"RELEASE_TAG=${GITHUB_REF#refs/tags/}\" >> $GITHUB_ENV"

#      - name: "Create release"
#        uses: "actions/github-script@v5"
#        with:
#          github-token: "${{ secrets.GITHUB_TOKEN }}"
#          script: |
#            try {
#              await github.rest.repos.createRelease({
#                draft: false,
#                generate_release_notes: true,
#                name: process.env.RELEASE_TAG,
#                owner: context.repo.owner,
#                prerelease: false,
#                repo: context.repo.repo,
#                tag_name: process.env.RELEASE_TAG,
#              });
#            } catch (error) {
#              core.setFailed(error.message);
#            }
#
#      - name: Upload release attachment
#        uses: actions/github-script@v5
#        with:
#          script: |
#            const fs = require('fs');
#            const tag = context.ref.replace("refs/tags/", "");
#            // Get release for this tag
#            const release = await github.repos.getReleaseByTag({
#              owner: context.repo.owner,
#              repo: context.repo.repo,
#              tag
#            });
#            // Upload the release asset
#            await github.repos.uploadReleaseAsset({
#              owner: context.repo.owner,
#              repo: context.repo.repo,
#              release_id: release.data.id,
#              name: "dontpanic.oxt",
#              data: await fs.readFileSync("./out/doncpanic.oxt")
#            });
